# Generated by Django 2.1.5 on 2019-01-25 10:33

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('subjects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Intervention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(null=True)),
                ('mean', models.FloatField(null=True)),
                ('median', models.FloatField(null=True)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('sd', models.FloatField(null=True)),
                ('se', models.FloatField(null=True)),
                ('cv', models.FloatField(null=True)),
                ('unit', models.CharField(choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('category', models.CharField(choices=[('dosing', 'dosing'), ('smoking cessation', 'smoking cessation'), ('medication type', 'medication type'), ('metabolic challenge', 'metabolic challenge'), ('abstinence', 'abstinence'), ('smoking', 'smoking'), ('oral contraceptives', 'oral contraceptives'), ('sleeping', 'sleeping'), ('circadian', 'circadian')], max_length=200)),
                ('choice', models.CharField(max_length=600, null=True)),
                ('form', models.CharField(choices=[('tablet', 'tablet'), ('capsule', 'capsule'), ('solution', 'solution'), ('NaN', 'NaN')], max_length=200, null=True)),
                ('application', models.CharField(choices=[('single dose', 'single dose'), ('multiple dose', 'multiple dose'), ('continuous injection', 'continuous injection'), ('variable infusion', 'variable infusion'), ('constant infusion', 'constant infusion')], max_length=200, null=True)),
                ('time', models.FloatField(null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('route', models.CharField(choices=[('oral', 'oral'), ('iv', 'iv'), ('intramuscular', 'intramuscular')], max_length=200, null=True)),
                ('name', models.CharField(max_length=200)),
                ('final', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InterventionEx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=200, null=True)),
                ('subset_map', models.CharField(max_length=600, null=True)),
                ('groupby', models.CharField(max_length=600, null=True)),
                ('value', models.FloatField(null=True)),
                ('mean', models.FloatField(null=True)),
                ('median', models.FloatField(null=True)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('sd', models.FloatField(null=True)),
                ('se', models.FloatField(null=True)),
                ('cv', models.FloatField(null=True)),
                ('unit', models.CharField(choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('value_map', models.CharField(max_length=600, null=True)),
                ('mean_map', models.CharField(max_length=600, null=True)),
                ('median_map', models.CharField(max_length=600, null=True)),
                ('min_map', models.CharField(max_length=600, null=True)),
                ('max_map', models.CharField(max_length=600, null=True)),
                ('sd_map', models.CharField(max_length=600, null=True)),
                ('se_map', models.CharField(max_length=600, null=True)),
                ('cv_map', models.CharField(max_length=600, null=True)),
                ('unit_map', models.CharField(max_length=600, null=True)),
                ('category', models.CharField(choices=[('dosing', 'dosing'), ('smoking cessation', 'smoking cessation'), ('medication type', 'medication type'), ('metabolic challenge', 'metabolic challenge'), ('abstinence', 'abstinence'), ('smoking', 'smoking'), ('oral contraceptives', 'oral contraceptives'), ('sleeping', 'sleeping'), ('circadian', 'circadian')], max_length=200)),
                ('choice', models.CharField(max_length=600, null=True)),
                ('form', models.CharField(choices=[('tablet', 'tablet'), ('capsule', 'capsule'), ('solution', 'solution'), ('NaN', 'NaN')], max_length=200, null=True)),
                ('application', models.CharField(choices=[('single dose', 'single dose'), ('multiple dose', 'multiple dose'), ('continuous injection', 'continuous injection'), ('variable infusion', 'variable infusion'), ('constant infusion', 'constant infusion')], max_length=200, null=True)),
                ('time', models.FloatField(null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('route', models.CharField(choices=[('oral', 'oral'), ('iv', 'iv'), ('intramuscular', 'intramuscular')], max_length=200, null=True)),
                ('choice_map', models.CharField(max_length=200, null=True)),
                ('form_map', models.CharField(max_length=200, null=True)),
                ('application_map', models.CharField(max_length=200, null=True)),
                ('time_map', models.CharField(max_length=200, null=True)),
                ('time_unit_map', models.CharField(max_length=200, null=True)),
                ('substance_map', models.CharField(max_length=200, null=True)),
                ('route_map', models.CharField(max_length=200, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('name_map', models.CharField(max_length=200, null=True)),
                ('figure', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='f_intervention_exs', to='subjects.DataFile')),
            ],
        ),
        migrations.CreateModel(
            name='InterventionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Output',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(null=True)),
                ('mean', models.FloatField(null=True)),
                ('median', models.FloatField(null=True)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('sd', models.FloatField(null=True)),
                ('se', models.FloatField(null=True)),
                ('cv', models.FloatField(null=True)),
                ('pktype', models.CharField(choices=[('auc_inf', 'auc_inf'), ('auc_end', 'auc_end'), ('auc_relative', 'auc_relative'), ('aumc_inf', 'aumc_inf'), ('amount', 'amount'), ('cum_amount', 'cum_amount'), ('concentration', 'concentration'), ('concentration_unbound', 'concentration_unbound'), ('ratio', 'ratio'), ('clearance', 'clearance'), ('clearance_unbound', 'clearance_unbound'), ('clearance_partial', 'clearance_partial'), ('clearance_intrinsic', 'clearance_intrinsic'), ('clearance_renal', 'clearance_renal'), ('vd', 'vd'), ('vd_unbound', 'vd_unbound'), ('thalf', 'thalf'), ('tmax', 'tmax'), ('oro-cecal transit time', 'oro-cecal transit time'), ('mrt', 'mrt'), ('cmax', 'cmax'), ('kel', 'kel'), ('kabs', 'kabs'), ('fraction_absorbed', 'fraction_absorbed'), ('plasma_binding', 'plasma_binding'), ('fraction_unbound', 'fraction_unbound'), ('recovery', 'recovery'), ('egp', 'egp'), ('ra', 'ra'), ('rd', 'rd'), ('rate_cycling', 'rate_cycling'), ('rate_secretion', 'rate_secretion'), ('rate_renal', 'rate_renal'), ('Matsuda index', 'Matsuda index'), ('QUICKI', 'QUICKI'), ('HOMA-IR', 'HOMA-IR'), ('Insulinogenic index', 'Insulinogenic index'), ('Oral disposition index', 'Oral disposition index')], max_length=200, null=True)),
                ('time', models.FloatField(null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('unit', models.CharField(choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200)),
                ('tissue', models.CharField(choices=[('saliva', 'saliva'), ('plasma', 'plasma'), ('serum', 'serum'), ('urine', 'urine'), ('spinal fluid', 'spinal fluid'), ('saliva/plasma', 'saliva/plasma'), ('breath', 'breath')], max_length=200)),
                ('final', models.BooleanField(default=False)),
                ('_interventions', models.ManyToManyField(to='interventions.Intervention')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutputEx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=200, null=True)),
                ('subset_map', models.CharField(max_length=600, null=True)),
                ('groupby', models.CharField(max_length=600, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('median', models.FloatField(blank=True, null=True)),
                ('min', models.FloatField(blank=True, null=True)),
                ('max', models.FloatField(blank=True, null=True)),
                ('sd', models.FloatField(blank=True, null=True)),
                ('se', models.FloatField(blank=True, null=True)),
                ('cv', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('value_map', models.CharField(blank=True, max_length=600, null=True)),
                ('mean_map', models.CharField(blank=True, max_length=600, null=True)),
                ('median_map', models.CharField(blank=True, max_length=600, null=True)),
                ('min_map', models.CharField(blank=True, max_length=600, null=True)),
                ('max_map', models.CharField(blank=True, max_length=600, null=True)),
                ('sd_map', models.CharField(blank=True, max_length=600, null=True)),
                ('se_map', models.CharField(blank=True, max_length=600, null=True)),
                ('cv_map', models.CharField(blank=True, max_length=600, null=True)),
                ('unit_map', models.CharField(blank=True, max_length=600, null=True)),
                ('tissue', models.CharField(choices=[('saliva', 'saliva'), ('plasma', 'plasma'), ('serum', 'serum'), ('urine', 'urine'), ('spinal fluid', 'spinal fluid'), ('saliva/plasma', 'saliva/plasma'), ('breath', 'breath')], max_length=200, null=True)),
                ('pktype', models.CharField(choices=[('auc_inf', 'auc_inf'), ('auc_end', 'auc_end'), ('auc_relative', 'auc_relative'), ('aumc_inf', 'aumc_inf'), ('amount', 'amount'), ('cum_amount', 'cum_amount'), ('concentration', 'concentration'), ('concentration_unbound', 'concentration_unbound'), ('ratio', 'ratio'), ('clearance', 'clearance'), ('clearance_unbound', 'clearance_unbound'), ('clearance_partial', 'clearance_partial'), ('clearance_intrinsic', 'clearance_intrinsic'), ('clearance_renal', 'clearance_renal'), ('vd', 'vd'), ('vd_unbound', 'vd_unbound'), ('thalf', 'thalf'), ('tmax', 'tmax'), ('oro-cecal transit time', 'oro-cecal transit time'), ('mrt', 'mrt'), ('cmax', 'cmax'), ('kel', 'kel'), ('kabs', 'kabs'), ('fraction_absorbed', 'fraction_absorbed'), ('plasma_binding', 'plasma_binding'), ('fraction_unbound', 'fraction_unbound'), ('recovery', 'recovery'), ('egp', 'egp'), ('ra', 'ra'), ('rd', 'rd'), ('rate_cycling', 'rate_cycling'), ('rate_secretion', 'rate_secretion'), ('rate_renal', 'rate_renal'), ('Matsuda index', 'Matsuda index'), ('QUICKI', 'QUICKI'), ('HOMA-IR', 'HOMA-IR'), ('Insulinogenic index', 'Insulinogenic index'), ('Oral disposition index', 'Oral disposition index')], max_length=200, null=True)),
                ('time', models.FloatField(null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('substance_map', models.CharField(max_length=600, null=True)),
                ('tissue_map', models.CharField(max_length=200, null=True)),
                ('pktype_map', models.CharField(max_length=200, null=True)),
                ('time_map', models.CharField(max_length=200, null=True)),
                ('time_unit_map', models.CharField(max_length=200, null=True)),
                ('group_map', models.CharField(max_length=200, null=True)),
                ('individual_map', models.CharField(max_length=200, null=True)),
                ('interventions_map', models.CharField(max_length=200, null=True)),
                ('figure', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='f_output_exs', to='subjects.DataFile')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Group')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Individual')),
                ('interventions', models.ManyToManyField(to='interventions.Intervention')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutputSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Substance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('indocyanogreen', 'indocyanogreen'), ('acetaminophen', 'acetaminophen'), ('caffeine', 'caffeine'), ('paraxanthine', 'paraxanthine'), ('theobromine', 'theobromine'), ('theophylline', 'theophylline'), ('AFMU', 'AFMU'), ('AAMU', 'AAMU'), ('1U', '1U'), ('17X', '17X'), ('17U', '17U'), ('37X', '37X'), ('1X', '1X'), ('methylxanthine', 'methylxanthine'), ('paraxanthine/caffeine', 'paraxanthine/caffeine'), ('caffeine/paraxanthine', 'caffeine/paraxanthine'), ('theobromine/caffeine', 'theobromine/caffeine'), ('theophylline/caffeine', 'theophylline/caffeine'), ('1X/caffeine', '1X/caffeine'), ('1X/paraxanthine', '1X/paraxanthine'), ('1X/theophylline', '1X/theophylline'), ('(AFMU+1U+1X)/17U', '(AFMU+1U+1X)/17U'), ('(AAMU+1X+1U)/17U', '(AAMU+1X+1U)/17U'), ('17U/17X', '17U/17X'), ('1U/(1U+1X)', '1U/(1U+1X)'), ('1U/1X', '1U/1X'), ('AFMU/(AFMU+1U+1X)', 'AFMU/(AFMU+1U+1X)'), ('AAMU/(AAMU+1U+1X)', 'AAMU/(AAMU+1U+1X)'), ('cimetidine', 'cimetidine'), ('fluvoxamine', 'fluvoxamine'), ('disulfiram', 'disulfiram'), ('naringenin', 'naringenin'), ('grapefruit juice', 'grapefruit juice'), ('quinolone', 'quinolone'), ('pipemidic acid', 'pipemidic acid'), ('norfloxacin', 'norfloxacin'), ('enoxacin', 'enoxacin'), ('ciprofloxacin', 'ciprofloxacin'), ('ofloxacin', 'ofloxacin'), ('levonorgestrel', 'levonorgestrel'), ('gestodene', 'gestodene'), ('EE2', 'EE2'), ('codeine', 'codeine'), ('codeine-6-glucuronide', 'codeine-6-glucuronide'), ('norcodeine', 'norcodeine'), ('norcodeine-glucuronide', 'norcodeine-glucuronide'), ('codeine/morphine', 'codeine/morphine'), ('morphine/codeine', 'morphine/codeine'), ('(Mor+M3G+M6G)/(Cod+C6G)', '(Mor+M3G+M6G)/(Cod+C6G)'), ('morphine+M3G+M6G', 'morphine+M3G+M6G'), ('morphine+normorphine+M3G+M6G+codeine+norcodeine+C3G+C6G', 'morphine+normorphine+M3G+M6G+codeine+norcodeine+C3G+C6G'), ('morphine+normorphine+M3G+M6G+codeine+norcodeine+C3G+NCG', 'morphine+normorphine+M3G+M6G+codeine+norcodeine+C3G+NCG'), ('M+N+C-6-G', 'M+N+C-6-G'), ('quinidine', 'quinidine'), ('debrisoquine', 'debrisoquine'), ('debrisoquine/4-hydroxydebrisoquine', 'debrisoquine/4-hydroxydebrisoquine'), ('salbutamol', 'salbutamol'), ('beclometasone', 'beclometasone'), ('enalapril', 'enalapril'), ('diltiazem', 'diltiazem'), ('hydrochlorthiazide', 'hydrochlorthiazide'), ('amiloride', 'amiloride'), ('chlordiazepoxide', 'chlordiazepoxide'), ('chlorzoxazone', 'chlorzoxazone'), ('6-hydroxychlorzoxazone', '6-hydroxychlorzoxazone'), ('tizanidine', 'tizanidine'), ('venlafaxine', 'venlafaxine'), ('lomefloxacin', 'lomefloxacin'), ('ephedrine', 'ephedrine'), ('pseudoephedrine', 'pseudoephedrine'), ('ibuprofen', 'ibuprofen'), ('aspirin', 'aspirin'), ('enoxacin', 'enoxacin'), ('ciprofloxacin', 'ciprofloxacin'), ('pipemidic acid', 'pipemidic acid'), ('norfloxacin', 'norfloxacin'), ('ofloxacin', 'ofloxacin'), ('fluvoxamine', 'fluvoxamine'), ('ethanol', 'ethanol'), ('chlorozoxazone', 'chlorozoxazone'), ('lomefloxacin', 'lomefloxacin'), ('aminopyrine', 'aminopyrine'), ('antipyrine', 'antipyrine'), ('bromsulpthalein', 'bromsulpthalein'), ('phenylalanine', 'phenylalanine'), ('indocyanine green', 'indocyanine green'), ('morphine', 'morphine'), ('morphine-3-glucuronide', 'morphine-3-glucuronide'), ('morphine-6-glucuronide', 'morphine-6-glucuronide'), ('normorphine', 'normorphine'), ('normorphine-glucuronide', 'normorphine-glucuronide'), ('norcodeine-conjugates', 'norcodeine-conjugates'), ('diclofenac', 'diclofenac'), ('glycerol', 'glycerol'), ('FFA', 'FFA'), ('carbamazepine', 'carbamazepine'), ('metropolol', 'metropolol'), ('warfarin', 'warfarin'), ('midazolam', 'midazolam'), ('1-hydroxymidazolam', '1-hydroxymidazolam'), ('losartan', 'losartan'), ('exp3174', 'exp3174'), ('omeprazole', 'omeprazole'), ('5-hydroxyomeprazole', '5-hydroxyomeprazole'), ('5-hydroxyomeprazole/omeprazole', '5-hydroxyomeprazole/omeprazole'), ('dextromethorphan', 'dextromethorphan'), ('dextrorphan', 'dextrorphan'), ('digoxin', 'digoxin'), ('clozapine', 'clozapine'), ('carbon monoxide', 'carbon monoxide'), ('hydrogen', 'hydrogen'), ('sparteine', 'sparteine'), ('sparteine/(2-dehydrosparteine+5-dehydrosparteine)', 'sparteine/(2-dehydrosparteine+5-dehydrosparteine)'), ('sulfasalazine', 'sulfasalazine'), ('sulfapyridine', 'sulfapyridine'), ('glucose', 'glucose'), ('lactate', 'lactate'), ('[2-3H]glucose', '[2-3H]glucose'), ('[6-3H]glucose', '[6-3H]glucose'), ('[U-13C]glucose', '[U-13C]glucose'), ('[3-OMG]glucose', '[3-OMG]glucose'), ('insulin', 'insulin'), ('c-peptide', 'c-peptide'), ('cortisol', 'cortisol'), ('epinephrine', 'epinephrine'), ('norepinephrine', 'norepinephrine'), ('cortisol', 'cortisol'), ('growth hormone', 'growth hormone'), ('glucagon', 'glucagon'), ('TAA', 'TAA'), ('EAA', 'EAA'), ('NEAA', 'NEAA'), ('BCAA', 'BCAA'), ('exenatide', 'exenatide'), ('GIP', 'GIP'), ('GLP-1', 'GLP-1'), ('insulin/glucose', 'insulin/glucose')], max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Timecourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pktype', models.CharField(choices=[('auc_inf', 'auc_inf'), ('auc_end', 'auc_end'), ('auc_relative', 'auc_relative'), ('aumc_inf', 'aumc_inf'), ('amount', 'amount'), ('cum_amount', 'cum_amount'), ('concentration', 'concentration'), ('concentration_unbound', 'concentration_unbound'), ('ratio', 'ratio'), ('clearance', 'clearance'), ('clearance_unbound', 'clearance_unbound'), ('clearance_partial', 'clearance_partial'), ('clearance_intrinsic', 'clearance_intrinsic'), ('clearance_renal', 'clearance_renal'), ('vd', 'vd'), ('vd_unbound', 'vd_unbound'), ('thalf', 'thalf'), ('tmax', 'tmax'), ('oro-cecal transit time', 'oro-cecal transit time'), ('mrt', 'mrt'), ('cmax', 'cmax'), ('kel', 'kel'), ('kabs', 'kabs'), ('fraction_absorbed', 'fraction_absorbed'), ('plasma_binding', 'plasma_binding'), ('fraction_unbound', 'fraction_unbound'), ('recovery', 'recovery'), ('egp', 'egp'), ('ra', 'ra'), ('rd', 'rd'), ('rate_cycling', 'rate_cycling'), ('rate_secretion', 'rate_secretion'), ('rate_renal', 'rate_renal'), ('Matsuda index', 'Matsuda index'), ('QUICKI', 'QUICKI'), ('HOMA-IR', 'HOMA-IR'), ('Insulinogenic index', 'Insulinogenic index'), ('Oral disposition index', 'Oral disposition index')], max_length=200, null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('tissue', models.CharField(choices=[('saliva', 'saliva'), ('plasma', 'plasma'), ('serum', 'serum'), ('urine', 'urine'), ('spinal fluid', 'spinal fluid'), ('saliva/plasma', 'saliva/plasma'), ('breath', 'breath')], max_length=200)),
                ('unit', models.CharField(choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200)),
                ('value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('mean', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('sd', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('se', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('cv', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None)),
                ('final', models.BooleanField(default=False)),
                ('_interventions', models.ManyToManyField(to='interventions.Intervention')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimecourseEx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=200, null=True)),
                ('subset_map', models.CharField(max_length=600, null=True)),
                ('groupby', models.CharField(max_length=600, null=True)),
                ('value', models.FloatField(null=True)),
                ('mean', models.FloatField(null=True)),
                ('median', models.FloatField(null=True)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('sd', models.FloatField(null=True)),
                ('se', models.FloatField(null=True)),
                ('cv', models.FloatField(null=True)),
                ('unit', models.CharField(choices=[('-', '-'), ('%', '%'), ('mega', 'mega'), ('kilo', 'kilo'), ('milli', 'milli'), ('micro', 'micro'), ('cm', 'cm'), ('m', 'm'), ('kg', 'kg'), ('mg', 'mg'), ('g', 'g'), ('mmHg', 'mmHg'), ('mmol', 'mmol'), ('µmol', 'µmol'), ('nmol', 'nmol'), ('m^2', 'm^2'), ('1/week', '1/week'), ('1/day', '1/day'), ('1/h', '1/h'), ('1/min', '1/min'), ('1/s', '1/s'), ('g/kg', 'g/kg'), ('mg/kg', 'mg/kg'), ('pmol/kg', 'pmol/kg'), ('mg/70kg', 'mg/70kg'), ('mU/kg', 'mU/kg'), ('U/kg', 'U/kg'), ('mg/day', 'mg/day'), ('kg/m^2', 'kg/m^2'), ('IU/I', 'IU/I'), ('µg/l', 'µg/l'), ('µg/ml', 'µg/ml'), ('µg/dl', 'µg/dl'), ('mg/dl', 'mg/dl'), ('mg/100ml', 'mg/100ml'), ('mg/l', 'mg/l'), ('ng/l', 'ng/l'), ('g/dl', 'g/dl'), ('ng/ml', 'ng/ml'), ('pg/ml', 'pg/ml'), ('mmol/l', 'mmol/l'), ('nmol/ml', 'nmol/ml'), ('µmol/l', 'µmol/l'), ('nmol/l', 'nmol/l'), ('pmol/l', 'pmol/l'), ('pmol/ml', 'pmol/ml'), ('fmol/l', 'fmol/l'), ('µU/ml', 'µU/ml'), ('ng/g', 'ng/g'), ('h*mg/l', 'h*mg/l'), ('h*µg/l', 'h*µg/l'), ('h*µg/ml', 'h*µg/ml'), ('mg*h/l', 'mg*h/l'), ('mg/l*h', 'mg/l*h'), ('ng*h/ml', 'ng*h/ml'), ('ng*min/ml', 'ng*min/ml'), ('µg*h/ml', 'µg*h/ml'), ('µg/ml*h', 'µg/ml*h'), ('mg*min/l', 'mg*min/l'), ('mg/l*min', 'mg/l*min'), ('µg*min/ml', 'µg*min/ml'), ('µmol*h/l', 'µmol*h/l'), ('µmol/l*h', 'µmol/l*h'), ('pmol*h/ml', 'pmol*h/ml'), ('pmol/ml*h', 'pmol/ml*h'), ('h*pmol/ml', 'h*pmol/ml'), ('nmol*h/l', 'nmol*h/l'), ('nmol/l*h', 'nmol/l*h'), ('µg/ml*h/kg', 'µg/ml*h/kg'), ('mg*h/l/kg', 'mg*h/l/kg'), ('µU/ml*min', 'µU/ml*min'), ('mg*h^2/l', 'mg*h^2/l'), ('mg/l*h^2', 'mg/l*h^2'), ('ng*h^2/ml', 'ng*h^2/ml'), ('ng*min^2/ml', 'ng*min^2/ml'), ('µg*h^2/ml', 'µg*h^2/ml'), ('µg/ml*h^2', 'µg/ml*h^2'), ('mg*min^2/l', 'mg*min^2/l'), ('mg/l*min^2', 'mg/l*min^2'), ('µg*min^2/ml', 'µg*min^2/ml'), ('µmol*h^2/l', 'µmol*h^2/l'), ('µmol/l*h^2', 'µmol/l*h^2'), ('pmol*h^2/ml', 'pmol*h^2/ml'), ('pmol/ml*h^2', 'pmol/ml*h^2'), ('nmol*h^2/l', 'nmol*h^2/l'), ('µg/ml*h^2/kg', 'µg/ml*h^2/kg'), ('mg*h^2/l/kg', 'mg*h^2/l/kg'), ('µU/ml*min^2', 'µU/ml*min^2'), ('l', 'l'), ('ml', 'ml'), ('l/kg', 'l/kg'), ('ml/kg', 'ml/kg'), ('ml/min', 'ml/min'), ('ml/h', 'ml/h'), ('l/h', 'l/h'), ('l/h/kg', 'l/h/kg'), ('l/h*kg', 'l/h*kg'), ('ml/h/kg', 'ml/h/kg'), ('ml/kg/min', 'ml/kg/min'), ('ml/min/kg', 'ml/min/kg'), ('ml/min/1.73m^2', 'ml/min/1.73m^2'), ('mg/min', 'mg/min'), ('µg/min', 'µg/min'), ('mg/kg/min', 'mg/kg/min'), ('mg/min/kg', 'mg/min/kg'), ('µmol/min', 'µmol/min'), ('µmol/kg/min', 'µmol/kg/min'), ('µmol/min/kg', 'µmol/min/kg'), ('pmol/min', 'pmol/min'), ('pmol/kg/min', 'pmol/kg/min'), ('pmol/min/kg', 'pmol/min/kg'), ('mU/min', 'mU/min'), ('mU/min/kg', 'mU/min/kg'), ('mU/kg/min', 'mU/kg/min'), ('cups/day', 'cups/day'), ('g/day', 'g/day'), ('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('value_map', models.CharField(max_length=600, null=True)),
                ('mean_map', models.CharField(max_length=600, null=True)),
                ('median_map', models.CharField(max_length=600, null=True)),
                ('min_map', models.CharField(max_length=600, null=True)),
                ('max_map', models.CharField(max_length=600, null=True)),
                ('sd_map', models.CharField(max_length=600, null=True)),
                ('se_map', models.CharField(max_length=600, null=True)),
                ('cv_map', models.CharField(max_length=600, null=True)),
                ('unit_map', models.CharField(max_length=600, null=True)),
                ('tissue', models.CharField(choices=[('saliva', 'saliva'), ('plasma', 'plasma'), ('serum', 'serum'), ('urine', 'urine'), ('spinal fluid', 'spinal fluid'), ('saliva/plasma', 'saliva/plasma'), ('breath', 'breath')], max_length=200, null=True)),
                ('pktype', models.CharField(choices=[('auc_inf', 'auc_inf'), ('auc_end', 'auc_end'), ('auc_relative', 'auc_relative'), ('aumc_inf', 'aumc_inf'), ('amount', 'amount'), ('cum_amount', 'cum_amount'), ('concentration', 'concentration'), ('concentration_unbound', 'concentration_unbound'), ('ratio', 'ratio'), ('clearance', 'clearance'), ('clearance_unbound', 'clearance_unbound'), ('clearance_partial', 'clearance_partial'), ('clearance_intrinsic', 'clearance_intrinsic'), ('clearance_renal', 'clearance_renal'), ('vd', 'vd'), ('vd_unbound', 'vd_unbound'), ('thalf', 'thalf'), ('tmax', 'tmax'), ('oro-cecal transit time', 'oro-cecal transit time'), ('mrt', 'mrt'), ('cmax', 'cmax'), ('kel', 'kel'), ('kabs', 'kabs'), ('fraction_absorbed', 'fraction_absorbed'), ('plasma_binding', 'plasma_binding'), ('fraction_unbound', 'fraction_unbound'), ('recovery', 'recovery'), ('egp', 'egp'), ('ra', 'ra'), ('rd', 'rd'), ('rate_cycling', 'rate_cycling'), ('rate_secretion', 'rate_secretion'), ('rate_renal', 'rate_renal'), ('Matsuda index', 'Matsuda index'), ('QUICKI', 'QUICKI'), ('HOMA-IR', 'HOMA-IR'), ('Insulinogenic index', 'Insulinogenic index'), ('Oral disposition index', 'Oral disposition index')], max_length=200, null=True)),
                ('time', models.FloatField(null=True)),
                ('time_unit', models.CharField(choices=[('yr', 'yr'), ('week', 'week'), ('day', 'day'), ('h', 'h'), ('min', 'min'), ('s', 's')], max_length=200, null=True)),
                ('substance_map', models.CharField(max_length=600, null=True)),
                ('tissue_map', models.CharField(max_length=200, null=True)),
                ('pktype_map', models.CharField(max_length=200, null=True)),
                ('time_map', models.CharField(max_length=200, null=True)),
                ('time_unit_map', models.CharField(max_length=200, null=True)),
                ('group_map', models.CharField(max_length=200, null=True)),
                ('individual_map', models.CharField(max_length=200, null=True)),
                ('interventions_map', models.CharField(max_length=200, null=True)),
                ('figure', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='f_timecourse_exs', to='subjects.DataFile')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Group')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Individual')),
                ('interventions', models.ManyToManyField(to='interventions.Intervention')),
                ('outputset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='timecourse_exs', to='interventions.OutputSet')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='s_timecourse_exs', to='subjects.DataFile')),
                ('substance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='interventions.Substance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='timecourse',
            name='ex',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timecourses', to='interventions.TimecourseEx'),
        ),
        migrations.AddField(
            model_name='timecourse',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='subjects.Group'),
        ),
        migrations.AddField(
            model_name='timecourse',
            name='individual',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='subjects.Individual'),
        ),
        migrations.AddField(
            model_name='timecourse',
            name='raw',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='norm', to='interventions.Timecourse'),
        ),
        migrations.AddField(
            model_name='timecourse',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='timecourses', to='interventions.Substance'),
        ),
        migrations.AddField(
            model_name='outputex',
            name='outputset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='output_exs', to='interventions.OutputSet'),
        ),
        migrations.AddField(
            model_name='outputex',
            name='source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='s_output_exs', to='subjects.DataFile'),
        ),
        migrations.AddField(
            model_name='outputex',
            name='substance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='interventions.Substance'),
        ),
        migrations.AddField(
            model_name='output',
            name='ex',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='interventions.OutputEx'),
        ),
        migrations.AddField(
            model_name='output',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Group'),
        ),
        migrations.AddField(
            model_name='output',
            name='individual',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.Individual'),
        ),
        migrations.AddField(
            model_name='output',
            name='raw',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='norm', to='interventions.Output'),
        ),
        migrations.AddField(
            model_name='output',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='outputs', to='interventions.Substance'),
        ),
        migrations.AddField(
            model_name='output',
            name='timecourse',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pharmacokinetics', to='interventions.Timecourse'),
        ),
        migrations.AddField(
            model_name='interventionex',
            name='interventionset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervention_exs', to='interventions.InterventionSet'),
        ),
        migrations.AddField(
            model_name='interventionex',
            name='source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='s_intervention_exs', to='subjects.DataFile'),
        ),
        migrations.AddField(
            model_name='interventionex',
            name='substance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='interventions.Substance'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='ex',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interventions', to='interventions.InterventionEx'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='raw',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='norm', to='interventions.Intervention'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='substance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='interventions', to='interventions.Substance'),
        ),
        migrations.AlterUniqueTogether(
            name='interventionex',
            unique_together={('interventionset', 'name', 'name_map', 'source')},
        ),
    ]
